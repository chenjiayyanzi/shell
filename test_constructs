#!/bin/bash
# if/then construct test whether the exit status of a list of commnads is 0
# a dedicated command calle [] bracket, it is a synonym for test
# with version 2.02, bash introduced the [[]] extedend test command.

# if can test any command
if cmp a b &>/dev/null
then echo "Files a and b are identical."
else echo "Files a and b differ."
fi

if grep -q Bash cleanup 
then echo "File contains at least one occurrence of Bash."
fi

word=Linux
letter_sequence=inu
if echo "$word"|grep -q "$letter_sequence"
then echo "$letter_sequence found in $word"
else echo "$letter_sequene not found in $word"
fi

if test -z "$1"
then echo "No command-line arguments"
else echo "First command-line argument is $1"
fi
echo


if [ -z "$1" ]
then echo "No command-line arguments"
else echo "First command-line argument is $1"
fi
echo

file=/etc/passwd

if [[ -e $file ]]
then echo "Password file exists."
fi
if [[ -x $file ]]
then echo "The user has execute permission on password file."
else echo "The user doesnt have execute permission on password file."
fi

device0="/dev/disk1"
if [ -b "$device0" ]
then echo "$device0 is a block device"
fi

device1="/dev/ttys1"
if [ -c "$device1" ]
then echo "$device1 is a character device"
fi

[ -f $file_var ]: This returns true if the given variable holds a regular file path or filename
[ -x $var ]: This returns true if the given variable holds a file path or filename that is executable
[ -d $var ]: This or directory name returns true if the given variable holds a directory path
[ -e $var ]: This returns true if the given variable holds an existing file 
[ -c $var ]: This returns true if the given variable holds the path of a character device file
[ -b $var ]: This returns true if the given variable holds the path of a block device file
[ -w $var ]: This returns true if the given variable holds the path of a file that is wrtitable
[ -r $var ]: This returns true if the given variable holds the path of a file that is readable
[ -L $var ]: This returns true if the given variable holds the path of a smylink

[[ -z $str1 ]]: This returns true if str1 holds an empty string
[[ -n $str1 ]]: This returns true if str1 holds a nonempty string

